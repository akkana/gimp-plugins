A collection of GIMP scripts and plug-ins by Akkana Peck.

These are all licensed under the GPL v2 or (at your option) any later GPL.
There's further discussion of some of them on my software page:
http://www.shallowsky.com/software/#gimp

Python plug-ins in the gimp2 directory are for the classic GIMP 2.x API
(which also requires that you have python2 and pygtk installed).
GIMP 3.0 is now out, and its Python API has changed completely.
(This is actually a good thing, despite the short-term irritation of
having to rewrite everything.)
I'm gradually migrating Python plug-ins to GIMP 3, putting them in the
gimp3 directory. If you need a plug-in that hasn't been updated yet,
email me or file an issue on GitHub and I'll get to it as soon as I can.

Script-fu scripts (ending in .scm) mostly haven't been tested yet in GIMP3.
I'm not sure if they work or not. If you need one of the script-fus
updated, again, email me or file a GitHub issue.

===============
INSTALLING PYTHON PLUG-INS:

First, find your plug-ins directory. Edit->Preferences, then scroll
down to Folders and expand it, scroll down again and click on Plug-ins.
You can choose any of those folders, but most typically you'd pick the one
that's in your user home directory, unless you're installing it for
multiple users on the same system.

Linux and Mac users will also have to make sure the plug-in is executable:
chmod +x filename.py

In GIMP 2.x, install a plug-in file by copying filename.py into
your plug-ins directory.

In GIMP 3.x, make a directory named the same as the filename, but
without the .py, then copy the .py file into it. For instance, to install
saver.py on Linux for GIMP 3.0:
    mkdir ~/.config/GIMP/3.0/plug-ins/saver
    cp saver.py ~/.config/GIMP/3.0/plug-ins/saver

===============
FAVORITE PLUG-INS (PYTHON):

(These are the plug-ins ported to GIMP 3 so far.)

saver.py
  (File->Saver and File->Saver as)
  Meant to be the One True Save/Export plug-in, which you can
  (if you choose) bind to ctrl-S and ctrl-Shift-S.
  It saves whether the type is XCF or other, it can automatically save
  an XCF plus a copy in a different format, and it can even scale that
  copy and remember the scaling.
  More info: http://www.shallowsky.com/software/gimp-save/

arrowdesigner.py
  (Filters->Render->Arrow Designer)
  Interactively draw an arrow in a new layer, using a rectangular
  selection as a guide.

pandora.py
  (Filters->Combine->Pandora panorama)
  Stitch a series of images (loaded as layers in one image) into a panorama.
  Doesn't do any smart matching based on the image contents; it just gives
  you initial fixed spacing and layer masks; then you can drag the images
  around to choose final placement, and edit the layer masks as needed.
  More info: http://www.shallowsky.com/software/pandora/

wallpaper.py
  (Image->Selection to Wallpaper)
  Make desktop wallpaper from the current image and selection.
  It has a few screen size presets (e.g. 1920x1200, 1920x1080,
  1680x1050, 1366x768, 1080x2400), and guesses which one to use
  based on the spect ratio of the current selection.
  It makes a new image containing only what's in the selection,
  scales it to the right size, then
  saves to a known place, defaulting to ~/Images/Backgrounds/1920x1200.

  It's recommended that you set rect select presets for aspect ratios
  like 16:8, 4:3, 1366:768, etc. if you make wallpapers often.

blobi.py
  Simple text effect similar to bevel and drop shadow, but more "blobby".

===============
OLDER PYTHON2 PLUG-INS:

(These have not been ported to GIMP 3. If you need one of them ported,
please file an issue or email me.)

arclayer.py
  Bend a layer (e.g. a text layer) in a circular arc.
  Also a good demo of how to use pixel regions in Python.

changefont.py
  Change font face and size for all text layers in the current image.

export-scaled.py
  Export a scaled version of the current image, remembering name & scale
  for the next export.

export-all.py
  Show a dialog offering to export all open images.
  Currently this is just a skeleton for other people to build on.

life.py
  Conway's Game of Life (more or less, with colors added).
  No, there's no practical use for it. It's just a silly demo.

migrate-gimp-presets.py
  Migrate 2.6 tool presets to 2.8 (which doesn't happen automatically).

pyui.py
  Demonstrate all possible UI options for pygimp registration dialogs.

===============
SCRIPT-FU:

(None of these have been ported to GIMP 3.)

arclayer.scm
  Bend a layer (e.g. a text layer) in a circular arc.
  Much much slower than the Python version, due to lack of pixel regions.
  Nore info: http://www.shallowsky.com/software/arclayer/

fibonacci.scm
  Draw a Fibonacci (golden ratio) spiral around Fibonacci number boxes.

gimplabels/
  Create label/businesscard templates, and pages of them, based on
  Avery and similar templates imported from glabels.
  Fiddly to use since you have to figure out your printer's "slop factor".
  More info: http://www.shallowsky.com/software/gimplabels/

pandora-combine.scm
  Stitch a series of images (loaded as layers in one image) into a panorama.
  Doesn't do any smart matching based on the image contents; it just gives
  you initial fixed spacing and layer masks; then you can drag the images
  around to choose final placement, and edit the layer masks as needed.
  More info: http://www.shallowsky.com/software/pandora/

stack.scm
  Make an averaged image stack:
  combine all the layers with opacity 1/num_images.

sf-helloworld.scm
  A simple script-fu demonstration (used in GIMP scripting talks).
